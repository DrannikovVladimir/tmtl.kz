const express = require('express');
const fs = require('fs').promises;
const path = require('path');
const { TourismParser } = require('../services/tourismParser');

const router = express.Router();

// –ü—É—Ç—å –∫ JSON —Ñ–∞–π–ª—É —Å –¥–∞–Ω–Ω—ã–º–∏
const getDataPath = () => path.join(__dirname, '..', 'data', 'tourism_data.json');

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
router.get('/data', async (req, res) => {
  try {
    const dataPath = getDataPath();
    const data = await fs.readFile(dataPath, 'utf8');
    const parsedData = JSON.parse(data);
    
    res.json({
      success: true,
      ...parsedData
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
    res.status(500).json({
      success: false,
      error: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ'
    });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞
router.get('/data/:city', async (req, res) => {
  try {
    const { city } = req.params;
    const dataPath = getDataPath();
    const data = await fs.readFile(dataPath, 'utf8');
    const parsedData = JSON.parse(data);
    
    if (!parsedData.data[city]) {
      return res.status(404).json({
        success: false,
        error: `–î–∞–Ω–Ω—ã–µ –¥–ª—è –≥–æ—Ä–æ–¥–∞ ${city} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã`
      });
    }
    
    res.json({
      success: true,
      city: city,
      updatedAt: parsedData.updatedAt,
      tours: parsedData.data[city]
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
    res.status(500).json({
      success: false,
      error: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ'
    });
  }
});

// –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ –≤—Ä—É—á–Ω—É—é
router.post('/parse', async (req, res) => {
  try {
    console.log('üîÑ –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ API –∑–∞–ø—Ä–æ—Å—É...');
    
    const parser = new TourismParser();
    const data = await parser.run();
    
    res.json({
      success: true,
      message: '–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ',
      data: data,
      updatedAt: new Date().toISOString()
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –¥–∞–Ω–Ω—ã—Ö',
      details: error.message
    });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –¥–∞–Ω–Ω—ã—Ö (–∫–æ–≥–¥–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ –æ–±–Ω–æ–≤–ª—è–ª–∏—Å—å)
router.get('/status', async (req, res) => {
  try {
    const dataPath = getDataPath();
    const stats = await fs.stat(dataPath);
    const data = await fs.readFile(dataPath, 'utf8');
    const parsedData = JSON.parse(data);
    
    const totalTours = Object.values(parsedData.data).reduce((sum, tours) => sum + tours.length, 0);
    
    res.json({
      success: true,
      fileExists: true,
      lastModified: stats.mtime,
      updatedAt: parsedData.updatedAt,
      totalTours: totalTours,
      citiesCount: Object.keys(parsedData.data).length,
      cities: Object.keys(parsedData.data)
    });
  } catch (error) {
    if (error.code === 'ENOENT') {
      res.json({
        success: true,
        fileExists: false,
        message: '–§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø–∞—Ä—Å–∏–Ω–≥.'
      });
    } else {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞:', error);
      res.status(500).json({
        success: false,
        error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞'
      });
    }
  }
});

// –ü–æ–∏—Å–∫ —Ç—É—Ä–æ–≤ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º
router.get('/search', async (req, res) => {
  try {
    const { city, country, maxPrice, minPrice } = req.query;
    
    const dataPath = getDataPath();
    const data = await fs.readFile(dataPath, 'utf8');
    const parsedData = JSON.parse(data);
    
    let results = [];
    
    // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –Ω—É–∂–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤
    const citiesToSearch = city ? [city] : Object.keys(parsedData.data);
    
    citiesToSearch.forEach(cityName => {
      if (parsedData.data[cityName]) {
        const cityTours = parsedData.data[cityName].map(tour => ({
          ...tour,
          fromCity: cityName
        }));
        results = results.concat(cityTours);
      }
    });
    
    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è
    if (country) {
      results = results.filter(tour => 
        tour.country.toLowerCase().includes(country.toLowerCase())
      );
    }
    
    if (maxPrice) {
      results = results.filter(tour => tour.priceNumeric <= parseInt(maxPrice));
    }
    
    if (minPrice) {
      results = results.filter(tour => tour.priceNumeric >= parseInt(minPrice));
    }
    
    // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ü–µ–Ω–µ
    results.sort((a, b) => a.priceNumeric - b.priceNumeric);
    
    res.json({
      success: true,
      results: results,
      count: results.length,
      filters: { city, country, maxPrice, minPrice }
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ'
    });
  }
});

module.exports = router;