const puppeteer = require('puppeteer');
const fs = require('fs').promises;
const path = require('path');
const emailNotifications = require('./emailNotifications');

class TourismParser {
  constructor() {
    this.cities = {
      almaty: 'https://tmtl.kz/calendars/almaty/',
      astana: 'https://tmtl.kz/calendars/astana/',
      karaganda: 'https://tmtl.kz/calendars/karaganda/'
    };
  }

  async createStealthBrowser() {
    return await puppeteer.launch({
      headless: true, // –ú–æ–∂–Ω–æ –ø–æ—Å—Ç–∞–≤–∏—Ç—å false –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      args: [
        '--no-sandbox',
        '--disable-setuid-sandbox',
        '--disable-blink-features=AutomationControlled',
        '--disable-features=VizDisplayCompositor',
        '--disable-dev-shm-usage',
        '--no-first-run',
        '--disable-default-apps',
        '--disable-infobars',
        '--window-size=1920,1080'
      ]
    });
  }

  async setupStealthPage(browser) {
    const page = await browser.newPage();
    
    // –†–µ–∞–ª—å–Ω—ã–π User-Agent
    await page.setUserAgent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36');
    
    // –†–µ–∞–ª—å–Ω—ã–π viewport
    await page.setViewport({ width: 1920, height: 1080 });
    
    // –£–±–∏—Ä–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
    await page.evaluateOnNewDocument(() => {
      Object.defineProperty(navigator, 'webdriver', {
        get: () => undefined,
      });
      
      Object.defineProperty(navigator, 'plugins', {
        get: () => [1, 2, 3, 4, 5],
      });
      
      Object.defineProperty(navigator, 'languages', {
        get: () => ['ru-RU', 'ru', 'en-US', 'en'],
      });
      
      if (navigator.chrome) {
        Object.defineProperty(navigator.chrome, 'runtime', {
          get: () => undefined,
        });
      }
      
      // –û—á–∏—â–∞–µ–º storage
      localStorage.clear();
      sessionStorage.clear();
    });
    
    // –û—Ç–∫–ª—é—á–∞–µ–º –∫—ç—à
    await page.setCacheEnabled(false);
    
    // –ë–ª–æ–∫–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
    await page.setRequestInterception(true);
    page.on('request', (req) => {
      if (req.resourceType() === 'image') {
        req.abort();
      } else {
        req.continue();
      }
    });
    
    return page;
  }

  async parsePage(url, cityName) {
    console.log(`\nüèôÔ∏è –ü–∞—Ä—Å–∏–Ω–≥ ${cityName}: ${url}`);
    
    let browser = null;
    
    try {
      browser = await this.createStealthBrowser();
      const page = await this.setupStealthPage(browser);
      
      console.log('üåê –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É...');
      await page.goto('https://tmtl.kz/', {
        waitUntil: 'networkidle2',
        timeout: 30000
      });
      
      // –ü–∞—É–∑–∞ –∫–∞–∫ —É —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      console.log(`üìç –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É ${cityName}...`);
      await page.goto(url, {
        waitUntil: 'networkidle2',
        timeout: 30000
      });
      
      console.log('‚è≥ –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞...');
      await page.waitForSelector('.TVCalendarCountyList', { timeout: 20000 });
      
      // –≠–º—É–ª–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await page.evaluate(() => {
        window.scrollTo(0, 500);
      });
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      await page.evaluate(() => {
        window.scrollTo(0, 0);
      });
      
      console.log('üîÑ –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö...');
      await new Promise(resolve => setTimeout(resolve, 5000));

      // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
      const tours = await page.evaluate(() => {
        const container = document.querySelector('.TVCalendarCountyList');
        if (!container) {
          console.log('‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä .TVCalendarCountyList –Ω–µ –Ω–∞–π–¥–µ–Ω');
          return [];
        }

        const allRows = container.querySelectorAll('.TVCalendarRow');
        const dataRows = [];
        
        for (let i = 0; i < allRows.length; i++) {
          const row = allRows[i];
          if (row.classList.contains('TVCalendarList') && !row.classList.contains('TVCalendarListHeader')) {
            dataRows.push(row);
          }
        }
        
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${dataRows.length} —Å—Ç—Ä–æ–∫ —Å –¥–∞–Ω–Ω—ã–º–∏`);
        
        const results = [];

        for (let index = 0; index < dataRows.length; index++) {
          const row = dataRows[index];
          
          try {
            // –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã
            const countryElement = row.querySelector('.TVCalendarCountryValue');
            const country = countryElement ? countryElement.textContent.trim() : '';

            // –î–∞—Ç–∞
            const dateElement = row.querySelector('.TVCalendarDate');
            const date = dateElement ? dateElement.textContent.trim() : '';

            // –¶–µ–Ω–∞
            const priceElement = row.querySelector('.TVCalendarPriceValue');
            const price = priceElement ? priceElement.textContent.trim() : '';

            // –í–∞–ª—é—Ç–∞
            const currencyElement = row.querySelector('.TVCalendarPriceCurrency');
            const currency = currencyElement ? currencyElement.textContent.trim() : '';

            // –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–∑–¥—É—Ö–∞
            const airTempElement = row.querySelector('.TVCalendarAir');
            const airTemp = airTempElement ? {
              value: airTempElement.textContent.trim(),
              title: airTempElement.getAttribute('title') || ''
            } : null;

            // –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–¥—ã
            const waterTempElement = row.querySelector('.TVCalendarWater');
            const waterTemp = waterTempElement ? {
              value: waterTempElement.textContent.trim(),
              title: waterTempElement.getAttribute('title') || ''
            } : null;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å—Ç—å
            if (country && date && price) {
              const tourData = {
                country: country,
                date: date,
                price: price,
                currency: currency,
                priceNumeric: parseInt(price.replace(/[^\d]/g, '')) || 0,
                temperature: {
                  air: airTemp,
                  water: waterTemp
                }
              };

              results.push(tourData);
              console.log(`üìù ${index + 1}. ${country} - ${price} ${currency}`);
            } else {
              console.log(`‚ö†Ô∏è –°—Ç—Ä–æ–∫–∞ ${index + 1}: –Ω–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ`);
            }
          } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Å—Ç—Ä–æ–∫–∏ ${index + 1}:`, error);
          }
        }

        return results;
      });

      console.log(`‚úÖ ${cityName}: –∏–∑–≤–ª–µ—á–µ–Ω–æ ${tours.length} —Ç—É—Ä–æ–≤`);
      return tours;

    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ ${cityName}:`, error);
      return [];
    } finally {
      if (browser) {
        await browser.close();
      }
    }
  }

  async parseAllCities() {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ stealth-–ø–∞—Ä—Å–µ—Ä–∞ —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö...');
    const results = {};
    
    for (const [cityName, url] of Object.entries(this.cities)) {
      try {
        const tours = await this.parsePage(url, cityName);
        results[cityName] = tours;
        
        // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –≥–æ—Ä–æ–¥–∞–º–∏
        if (Object.keys(results).length < Object.keys(this.cities).length) {
          console.log('‚è∏Ô∏è –ü–∞—É–∑–∞ 3 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –≥–æ—Ä–æ–¥–æ–º...');
          await new Promise(resolve => setTimeout(resolve, 3000));
        }
        
      } catch (error) {
        console.error(`üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è ${cityName}:`, error);
        results[cityName] = [];
      }
    }
    
    return results;
  }

  async saveToJson(data, filename = 'tourism_data.json') {
    const dataDir = path.join(__dirname, '..', 'data');
    
    try {
      await fs.mkdir(dataDir, { recursive: true });
      const filePath = path.join(dataDir, filename);
      
      const jsonData = {
        updatedAt: new Date().toISOString(),
        totalTours: Object.values(data).reduce((sum, tours) => sum + tours.length, 0),
        cities: Object.keys(data),
        data: data
      };
      
      await fs.writeFile(filePath, JSON.stringify(jsonData, null, 2), 'utf8');
      console.log(`üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ ${filePath}`);
      
      return filePath;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ JSON:', error);
      throw error;
    }
  }

  async run() {
    try {
      const data = await this.parseAllCities();
      
      console.log('\nüìä –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:');
      console.log('='.repeat(40));
      Object.entries(data).forEach(([city, tours]) => {
        console.log(`üèôÔ∏è ${city}: ${tours.length} —Ç—É—Ä–æ–≤`);
        if (tours.length > 0) {
          console.log(`   üìç –ü–µ—Ä–≤—ã–µ —Å—Ç—Ä–∞–Ω—ã: ${tours.slice(0, 3).map(t => t.country).join(', ')}...`);
        }
      });
      
      const filePath = await this.saveToJson(data);
      
      console.log('\nüéâ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
      console.log(`üìÅ –§–∞–π–ª: ${filePath}`);
      console.log(`üìà –í—Å–µ–≥–æ —Ç—É—Ä–æ–≤: ${Object.values(data).reduce((sum, tours) => sum + tours.length, 0)}`);
      
      try {
        const totalTours = Object.values(data).reduce((sum, tours) => sum + tours.length, 0);
        
        console.log('üìß –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ...');
        
        if (totalTours < 15) {
          await emailNotifications.sendLowDataWarning(data);
        } else {
          await emailNotifications.sendParsingSuccess(data);
        }
        
        console.log('‚úÖ Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ');
      } catch (emailError) {
        console.error('‚ùå –î–ï–¢–ê–õ–¨–ù–ê–Ø –û–®–ò–ë–ö–ê EMAIL:', emailError.message); // –î–û–ë–ê–í–õ–ï–ù–û
        console.error('‚ùå STACK TRACE:', emailError.stack); // –î–û–ë–ê–í–õ–ï–ù–û
        console.error('‚ùå EMAIL CONFIG:', { // –î–û–ë–ê–í–õ–ï–ù–û
          host: process.env.NOTIFICATIONS_HOST,
          user: process.env.NOTIFICATIONS_EMAIL,
          adminEmail: process.env.ADMIN_EMAIL
        });
      }

      return data;
      
    } catch (error) {
      console.error('üí• –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:', error);

      try {
        console.log('üìß –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ...');
        await emailNotifications.sendParsingError(error);
      } catch (emailError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email –æ–± –æ—à–∏–±–∫–µ:', emailError);
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –Ω–µ —É—Å—É–≥—É–±–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—É
      }

      throw error;
    }
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞
async function startParsing() {
  const parser = new TourismParser();
  
  try {
    return await parser.run();
  } catch (error) {
    console.error('üíÄ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
module.exports = {
  TourismParser,
  startParsing
};

// –ó–∞–ø—É—Å–∫, –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  startParsing();
}