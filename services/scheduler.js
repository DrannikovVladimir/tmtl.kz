const cron = require('node-cron');
const { startParsing } = require('./tourismParser');

class ParserScheduler {
  constructor() {
    this.isRunning = false;
  }

  async runScheduledParsing() {
    if (this.isRunning) {
      console.log('‚è∏Ô∏è –ü–∞—Ä—Å–µ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...');
      return;
    }

    this.isRunning = true;
    const startTime = new Date().toLocaleString('ru-RU', { timeZone: 'Asia/Almaty' });
    
    try {
      console.log(`üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞: ${startTime}`);
      await startParsing();
      console.log('‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞:', error);
    } finally {
      this.isRunning = false;
    }
  }

  start() {
    console.log('‚è∞ –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞...');
    console.log('üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 7:00 –∏ 18:00 (–≤—Ä–µ–º—è –ê–ª–º–∞—Ç—ã)');

    // –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 7:00 –∏ 18:00 (–≤—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞) 0 7,18 * * *
    cron.schedule('30 18 * * *', () => {
      this.runScheduledParsing();
    }, {
      scheduled: true,
      timezone: "Asia/Almaty"
    });

    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
    console.log('‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∞–∫—Ç–∏–≤–µ–Ω');
    this.logNextRun();
  }

  logNextRun() {
    const now = new Date();
    const today7 = new Date();
    today7.setHours(7, 0, 0, 0);
    
    const today18 = new Date();
    today18.setHours(18, 0, 0, 0);
    
    const tomorrow7 = new Date(today7);
    tomorrow7.setDate(tomorrow7.getDate() + 1);

    let nextRun;
    
    if (now < today7) {
      nextRun = today7;
    } else if (now < today18) {
      nextRun = today18;
    } else {
      nextRun = tomorrow7;
    }

    console.log(`‚è≠Ô∏è –°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫: ${nextRun.toLocaleString('ru-RU', { timeZone: 'Asia/Almaty' })}`);
  }

  // –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - –∑–∞–ø—É—Å–∫ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
  startTestMode() {
    console.log('üß™ –¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú: –∑–∞–ø—É—Å–∫ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É');
    
    cron.schedule('* * * * *', () => {
      this.runScheduledParsing();
    }, {
      scheduled: true,
      timezone: "Asia/Almaty"
    });
  }

  // –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫
  async runNow() {
    console.log('üéØ –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞...');
    await this.runScheduledParsing();
  }
}

module.exports = new ParserScheduler();