const nodemailer = require('nodemailer');
const { NOTIFICATIONS_EMAIL, NOTIFICATIONS_PASS, NOTIFICATIONS_HOST, ADMIN_EMAIL } = require('../config');

class EmailNotifications {
  constructor() {
    this.transporter = nodemailer.createTransport({ // –ò–°–ü–†–ê–í–õ–ï–ù–û: –±—ã–ª–æ createTransporter
      host: NOTIFICATIONS_HOST,
      port: 465,
      secure: true, // SSL
      auth: {
        user: NOTIFICATIONS_EMAIL,
        pass: NOTIFICATIONS_PASS
      }
    });
  }

  // –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...
  async sendParsingSuccess(data) {
    const totalTours = Object.values(data).reduce((sum, tours) => sum + tours.length, 0);
    const timestamp = new Date().toLocaleString('ru-RU', { timeZone: 'Asia/Almaty' });
    
    // –¢–æ–ø 5 —Å–∞–º—ã—Ö –¥–µ—à–µ–≤—ã—Ö —Ç—É—Ä–æ–≤
    const allTours = [];
    Object.entries(data).forEach(([city, tours]) => {
      tours.forEach(tour => {
        allTours.push({ ...tour, city });
      });
    });
    
    const topTours = allTours
      .sort((a, b) => a.priceNumeric - b.priceNumeric)
      .slice(0, 5);

    const subject = `‚úÖ –¢—É—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã - ${totalTours} —Ç—É—Ä–æ–≤ (${timestamp})`;
    
    const html = `
      <h2>üéâ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!</h2>
      <p><strong>–í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:</strong> ${timestamp}</p>
      
      <h3>üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –≥–æ—Ä–æ–¥–∞–º:</h3>
      <ul>
        ${Object.entries(data).map(([city, tours]) => 
          `<li><strong>${city}:</strong> ${tours.length} —Ç—É—Ä–æ–≤</li>`
        ).join('')}
      </ul>
      
      <h3>üèÜ –¢–æ–ø-5 —Å–∞–º—ã—Ö –¥–µ—à–µ–≤—ã—Ö —Ç—É—Ä–æ–≤:</h3>
      <ol>
        ${topTours.map(tour => 
          `<li><strong>${tour.country}</strong> –∏–∑ ${tour.city}: –æ—Ç ${tour.price} ${tour.currency}</li>`
        ).join('')}
      </ol>
      
      <hr>
      <p><small>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç –ø–∞—Ä—Å–µ—Ä–∞ —Ç—É—Ä–æ–≤</small></p>
    `;

    return await this.sendEmail(subject, html);
  }

  async sendParsingError(error) {
    const timestamp = new Date().toLocaleString('ru-RU', { timeZone: 'Asia/Almaty' });
    
    const subject = `‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç—É—Ä–æ–≤ (${timestamp})`;
    
    const html = `
      <h2>üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Ç—É—Ä–æ–≤!</h2>
      <p><strong>–í—Ä–µ–º—è –æ—à–∏–±–∫–∏:</strong> ${timestamp}</p>
      
      <h3>üìã –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:</h3>
      <pre style="background: #f5f5f5; padding: 10px; border-radius: 5px;">
${error.message}

Stack trace:
${error.stack}
      </pre>
      
      <p><strong>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:</strong> –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–∞–π—Ç–∞ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø–∞—Ä—Å–µ—Ä –≤—Ä—É—á–Ω—É—é.</p>
      
      <hr>
      <p><small>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç –ø–∞—Ä—Å–µ—Ä–∞ —Ç—É—Ä–æ–≤</small></p>
    `;

    return await this.sendEmail(subject, html);
  }

  async sendLowDataWarning(data) {
    const totalTours = Object.values(data).reduce((sum, tours) => sum + tours.length, 0);
    const timestamp = new Date().toLocaleString('ru-RU', { timeZone: 'Asia/Almaty' });
    
    const subject = `‚ö†Ô∏è –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –º–∞–ª–æ —Ç—É—Ä–æ–≤ –Ω–∞–π–¥–µ–Ω–æ - ${totalTours} (${timestamp})`;
    
    const html = `
      <h2>‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞ —Å –ø–∞—Ä—Å–∏–Ω–≥–æ–º</h2>
      <p><strong>–í—Ä–µ–º—è:</strong> ${timestamp}</p>
      <p><strong>–ù–∞–π–¥–µ–Ω–æ —Ç—É—Ä–æ–≤:</strong> ${totalTours} (–æ–±—ã—á–Ω–æ 25-35)</p>
      
      <h3>üìä –î–µ—Ç–∞–ª–∏ –ø–æ –≥–æ—Ä–æ–¥–∞–º:</h3>
      <ul>
        ${Object.entries(data).map(([city, tours]) => 
          `<li><strong>${city}:</strong> ${tours.length} —Ç—É—Ä–æ–≤</li>`
        ).join('')}
      </ul>
      
      <p><strong>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:</strong> –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∞–π—Ç –≤—Ä—É—á–Ω—É—é –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø–∞—Ä—Å–µ—Ä.</p>
      
      <hr>
      <p><small>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç –ø–∞—Ä—Å–µ—Ä–∞ —Ç—É—Ä–æ–≤</small></p>
    `;

    return await this.sendEmail(subject, html);
  }

  async sendEmail(subject, html) {
    try {
      const info = await this.transporter.sendMail({
        from: `"Parser Notifications" <${NOTIFICATIONS_EMAIL}>`,
        to: ADMIN_EMAIL,
        subject: subject,
        html: html
      });

      console.log('üìß Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω:', info.messageId);
      return info;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email:', error);
      throw error;
    }
  }
}

module.exports = new EmailNotifications();