// bot/leadMagnetBot.js

const TelegramBot = require('node-telegram-bot-api');
require('dotenv').config();

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
const SubscriptionService = require('./services/subscriptionService');
const FileService = require('./services/fileService');
const NotificationService = require('./services/notificationService');

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
const { handleStart } = require('./handlers/startHandler');
const { handleCallbackQuery } = require('./handlers/callbackHandler');
const { handleMessage } = require('./handlers/messageHandler');

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —É—Ç–∏–ª–∏—Ç—ã
const analytics = require('./utils/analytics');
const { log, getUserName, safeSendMessage  } = require('./utils/helpers');

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —à–∞–±–ª–æ–Ω—ã
const { helpMessage, unknownCommandMessage } = require('./templates/messages');

/**
 * –ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –ª–∏–¥-–º–∞–≥–Ω–∏—Ç –±–æ—Ç–∞
 */
class LeadMagnetBot {
  constructor() {
    this.token = process.env.LEAD_MAGNET_BOT_TOKEN;
    this.channelId = process.env.LEAD_MAGNET_CHANNEL_ID;
    
    this.validateConfig();
    this.initializeBot();
    this.initializeServices();
    this.setupHandlers();
    
    log('info', 'ü§ñ –õ–∏–¥-–º–∞–≥–Ω–∏—Ç –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
  }

  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
   */
  validateConfig() {
    if (!this.token) {
      throw new Error('LEAD_MAGNET_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
    }

    if (!this.channelId) {
      throw new Error('LEAD_MAGNET_CHANNEL_ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
    }

    log('info', 'üì° –¢–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω:', this.token.substring(0, 10) + '...');
    log('info', 'üì¢ –ö–∞–Ω–∞–ª:', this.channelId);
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
   */
  initializeBot() {
    this.bot = new TelegramBot(this.token, { polling: true });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫
    this.bot.on('error', (error) => {
      log('error', '–û—à–∏–±–∫–∞ –±–æ—Ç–∞:', error);
    });

    this.bot.on('polling_error', (error) => {
      log('error', '–û—à–∏–±–∫–∞ polling:', error);
    });
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
   */
  initializeServices() {
    this.subscriptionService = new SubscriptionService(this.bot);
    this.fileService = new FileService();
    this.notificationService = new NotificationService();
    
    log('info', '‚öôÔ∏è –°–µ—Ä–≤–∏—Å—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
   */
  setupHandlers() {
    // –ö–æ–º–∞–Ω–¥–∞ /start
    this.bot.onText(/\/start/, async (msg) => {
      this.recordInteraction(msg, 'start_command');
      await handleStart(this.bot, msg, {
        subscriptionService: this.subscriptionService,
        fileService: this.fileService
      });
    });

    // –ö–æ–º–∞–Ω–¥–∞ /help
    this.bot.onText(/\/help/, async (msg) => {
      this.recordInteraction(msg, 'help_command');
      await safeSendMessage(this.bot, msg.chat.id, helpMessage, {
        parse_mode: 'HTML'  // –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏–∑–º–µ–Ω–µ–Ω–æ —Å Markdown –Ω–∞ HTML
      });
    });

    // –ö–æ–º–∞–Ω–¥–∞ /check –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    this.bot.onText(/\/check/, async (msg) => {
      this.recordInteraction(msg, 'check_command');
      await this.handleCheckCommand(msg);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∫–Ω–æ–ø–æ–∫
    this.bot.on('callback_query', async (query) => {
      this.recordInteraction(query.message, 'callback_query', { data: query.data });
      await handleCallbackQuery(this.bot, query, {
        subscriptionService: this.subscriptionService,
        fileService: this.fileService
      });
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    this.bot.on('message', async (msg) => {
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã (–æ–Ω–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ)
      if (msg.text && msg.text.startsWith('/')) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        if (!this.isKnownCommand(msg.text)) {
          await safeSendMessage(this.bot, msg.chat.id, unknownCommandMessage);
        }
        return;
      }
      
      this.recordInteraction(msg, 'message');
      await handleMessage(this.bot, msg, {
        notificationService: this.notificationService
      });
    });

    log('info', 'üéØ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /check
   */
  async handleCheckCommand(msg) {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    const userName = getUserName(msg.from);
    
    log('info', `üîç –ö–æ–º–∞–Ω–¥–∞ /check –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userName} (ID: ${userId})`);
    
    try {
      const result = await this.subscriptionService.checkSubscription(userId);
      
      if (result.isSubscribed) {
        await safeSendMessage(this.bot, chatId, 
          '‚úÖ –û—Ç–ª–∏—á–Ω–æ! –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª. –ú–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –ª–∏–¥-–º–∞–≥–Ω–∏—Ç –∫–æ–º–∞–Ω–¥–æ–π /start'
        );
        log('info', `‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userName} –ø–æ–¥–ø–∏—Å–∞–Ω`);
      } else {
        await safeSendMessage(this.bot, chatId, 
          `‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª ${this.channelId}. –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å, –∞ –∑–∞—Ç–µ–º –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É.`
        );
        log('info', `‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userName} –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω`);
      }
    } catch (error) {
      log('error', '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /check:', error);
      await safeSendMessage(this.bot, chatId, 
        '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
      );
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–æ–º–∞–Ω–¥–∞ –∏–∑–≤–µ—Å—Ç–Ω–æ–π
   */
  isKnownCommand(command) {
    const knownCommands = ['/start', '/help', '/check'];
    const commandName = command.split(' ')[0].toLowerCase();
    return knownCommands.includes(commandName);
  }

  /**
   * –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
   */
  recordInteraction(msg, type, additionalData = {}) {
    try {
      const interactionData = {
        userId: msg.from.id,
        userName: getUserName(msg.from),
        chatId: msg.chat.id,
        type,
        messageId: msg.message_id,
        ...additionalData
      };

      analytics.recordUserInteraction(interactionData);
    } catch (error) {
      log('error', '–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è:', error);
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞
   */
  async getStats() {
    try {
      const stats = analytics.getGeneralStats();
      const downloadStats = analytics.getDownloadStats();
      const callbackStats = analytics.getCallbackStats();
      
      return {
        general: stats,
        downloads: downloadStats,
        callbacks: callbackStats,
        fileInfo: this.fileService.getFileInfo()
      };
    } catch (error) {
      log('error', '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
      return { error: error.message };
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
   */
  async sendStatsToAdmin() {
    try {
      const stats = await this.getStats();
      
      const statsMessage = `
üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ª–∏–¥-–º–∞–≥–Ω–∏—Ç –±–æ—Ç–∞**

üë• **–û–±—â–µ–µ:**
‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${stats.general.totalUsers}
‚Ä¢ –°–∫–∞—á–∏–≤–∞–Ω–∏–π: ${stats.general.totalDownloads}
‚Ä¢ –ó–∞—è–≤–æ–∫ –Ω–∞ –∑–≤–æ–Ω–∫–∏: ${stats.general.totalCallbacks}
‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Å–∏—è: ${stats.general.conversionRate}

üì• **–ó–∞ 30 –¥–Ω–µ–π:**
‚Ä¢ –°–∫–∞—á–∏–≤–∞–Ω–∏–π: ${stats.downloads.recentDownloads}
‚Ä¢ –ó–∞—è–≤–æ–∫: ${stats.callbacks.recentRequests}
‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤ –¥–µ–Ω—å: ${stats.downloads.averagePerDay}

üìÅ **–§–∞–π–ª:**
‚Ä¢ –†–∞–∑–º–µ—Ä: ${stats.fileInfo.sizeInMB} MB
‚Ä¢ –î–æ—Å—Ç—É–ø–µ–Ω: ${stats.fileInfo.exists ? '‚úÖ' : '‚ùå'}

üïê –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${new Date().toLocaleString('ru-RU', { timeZone: 'Asia/Almaty' })}
      `;

      await this.notificationService.sendGeneralNotification(
        this.bot, 
        statsMessage
      );
      
      log('info', '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É');
    } catch (error) {
      log('error', '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    }
  }

  /**
   * –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –±–æ—Ç–∞
   */
  stop() {
    if (this.bot) {
      this.bot.stopPolling();
      log('info', 'üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }
  }
}

// –°–æ–∑–¥–∞–µ–º –∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
const leadMagnetBotInstance = new LeadMagnetBot();

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
module.exports = {
  leadMagnetBot: leadMagnetBotInstance.bot,
  LeadMagnetBot,
  instance: leadMagnetBotInstance
};

// –ï—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  log('info', 'üöÄ –õ–∏–¥-–º–∞–≥–Ω–∏—Ç –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é');
  
  // Graceful shutdown
  process.on('SIGINT', () => {
    log('info', 'üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏');
    leadMagnetBotInstance.stop();
    process.exit(0);
  });
}