// bot/services/subscriptionService.js

const { LEAD_MAGNET_CHANNEL_ID } = require('../../config');

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ –Ω–∞ –∫–∞–Ω–∞–ª
 */
class SubscriptionService {
  constructor(bot) {
    this.bot = bot;
    this.channelId = LEAD_MAGNET_CHANNEL_ID;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–∞–Ω–∞–ª
   * @param {Number} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
   * @returns {Object} - –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
   */
  async checkSubscription(userId) {
    try {
      console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –Ω–∞ –∫–∞–Ω–∞–ª ${this.channelId}`);
      
      const chatMember = await this.bot.getChatMember(this.channelId, userId);
      console.log(`üìä –°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${chatMember.status}`);
      
      // –°—Ç–∞—Ç—É—Å—ã –ø–æ–¥–ø–∏—Å–∫–∏: 'creator', 'administrator', 'member', 'restricted', 'left', 'kicked'
      const isSubscribed = ['creator', 'administrator', 'member'].includes(chatMember.status);
      
      return {
        isSubscribed,
        status: chatMember.status,
        userInfo: isSubscribed ? {
          id: chatMember.user.id,
          username: chatMember.user.username,
          firstName: chatMember.user.first_name,
          lastName: chatMember.user.last_name,
          status: chatMember.status
        } : null
      };
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏:', error);
      
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω
      return {
        isSubscribed: false,
        status: 'error',
        error: error.message,
        userInfo: null
      };
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –ø–æ username (–¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞)
   * @param {String} username - Username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–µ–∑ @)
   * @returns {Object} - –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
   */
  async checkSubscriptionByUsername(username) {
    try {
      // –£–±–∏—Ä–∞–µ–º @ –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å –≤ –Ω–∞—á–∞–ª–µ
      const cleanUsername = username.startsWith('@') ? username.slice(1) : username;
      
      if (!cleanUsername) {
        return {
          isSubscribed: false,
          error: 'Username –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º'
        };
      }

      console.log(`üîç –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è @${cleanUsername} –Ω–∞ –∫–∞–Ω–∞–ª ${this.channelId}`);
      
      // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫
      let userId;
      try {
        const chat = await this.bot.getChat(`@${cleanUsername}`);
        userId = chat.id;
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${chat.first_name} ${chat.last_name || ''} (ID: ${userId})`);
      } catch (error) {
        console.log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @${cleanUsername}:`, error.message);
        
        return {
          isSubscribed: false,
          error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏ –∑–∞–∫—Ä—ã—Ç—ã'
        };
      }

      // –¢–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ user_id
      return await this.checkSubscription(userId);
      
    } catch (error) {
      console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ username:', error);
      return {
        isSubscribed: false,
        error: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏'
      };
    }
  }
}

module.exports = SubscriptionService;